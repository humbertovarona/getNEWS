
# Generated by CodiumAI

import unittest

class TestSaveNewsToDb(unittest.TestCase):

    #  Function successfully saves news item to database
    def test_save_news_item_successfully_saves_to_database(self):
        # Arrange
        import sqlite3
        conn = sqlite3.connect(':memory:')
        news_item = ('2021-01-01 12:00:00', 'Test News', 'Test Source', 'Test Category', 'http://test.com')
    
        # Act
        save_news_to_db(conn, news_item)
    
        # Assert
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM news')
        result = cursor.fetchone()
        self.assertEqual(result, news_item)

    #  Function correctly handles insertion of news item with special characters in title and source
    def test_save_news_item_handles_special_characters_in_title_and_source(self):
        # Arrange
        import sqlite3
        conn = sqlite3.connect(':memory:')
        news_item = ('2021-01-01 12:00:00', 'Test News with special characters: éàü', 'Test Source with special characters: éàü', 'Test Category', 'http://test.com')
    
        # Act
        save_news_to_db(conn, news_item)
    
        # Assert
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM news')
        result = cursor.fetchone()
        self.assertEqual(result, news_item)

    #  Function correctly handles insertion of news item with empty category
    def test_save_news_item_handles_empty_category(self):
        # Arrange
        import sqlite3
        conn = sqlite3.connect(':memory:')
        news_item = ('2021-01-01 12:00:00', 'Test News', 'Test Source', '', 'http://test.com')
    
        # Act
        save_news_to_db(conn, news_item)
    
        # Assert
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM news')
        result = cursor.fetchone()
        self.assertEqual(result, news_item)

    #  Function raises error when connection to database fails
    def test_save_news_item_raises_error_when_connection_fails(self):
        # Arrange
        import sqlite3
        conn = sqlite3.connect(':memory:')
        news_item = ('2021-01-01 12:00:00', 'Test News', 'Test Source', 'Test Category', 'http://test.com')
    
        # Act
        conn.close()
    
        # Assert
        with self.assertRaises(sqlite3.ProgrammingError):
            save_news_to_db(conn, news_item)

    #  Function raises error when news_item is not a tuple
    def test_save_news_item_raises_error_when_news_item_not_tuple(self):
        # Arrange
        import sqlite3
        conn = sqlite3.connect(':memory:')
        news_item = '2021-01-01 12:00:00', 'Test News', 'Test Source', 'Test Category', 'http://test.com'
    
        # Act & Assert
        with self.assertRaises(TypeError):
            save_news_to_db(conn, news_item)

    #  Function raises error when news_item tuple has less than 5 elements
    def test_save_news_item_raises_error_when_news_item_tuple_less_than_5_elements(self):
        # Arrange
        import sqlite3
        conn = sqlite3.connect(':memory:')
        news_item = ('2021-01-01 12:00:00', 'Test News', 'Test Source', 'Test Category')
    
        # Act & Assert
        with self.assertRaises(IndexError):
            save_news_to_db(conn, news_item)
