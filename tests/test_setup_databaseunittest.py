
# Generated by CodiumAI

import unittest

class TestSetupDatabase(unittest.TestCase):

    #  Creates a connection to a SQLite database named 'news.db'
    def test_creates_connection_to_database(self):
        # Arrange
        expected_db_name = 'news.db'
    
        # Act
        conn = setup_database()
    
        # Assert
        self.assertEqual(conn.database, expected_db_name)

    #  Creates a cursor object from the connection
    def test_creates_cursor_object(self):
        # Arrange
        expected_cursor_type = sqlite3.Cursor
    
        # Act
        conn = setup_database()
        cursor = conn.cursor()
    
        # Assert
        self.assertIsInstance(cursor, expected_cursor_type)

    #  Executes a SQL statement to create a table named 'news' with columns 'date_time', 'title', 'source', 'category', and 'url'
    def test_executes_sql_statement_to_create_table(self):
        # Arrange
        expected_table_name = 'news'
        expected_columns = ['date_time', 'title', 'source', 'category', 'url']
    
        # Act
        conn = setup_database()
        cursor = conn.cursor()
        cursor.execute("PRAGMA table_info(news)")
        table_info = cursor.fetchall()
    
        # Assert
        self.assertEqual(table_info[0][1], expected_columns[0])
        self.assertEqual(table_info[1][1], expected_columns[1])
        self.assertEqual(table_info[2][1], expected_columns[2])
        self.assertEqual(table_info[3][1], expected_columns[3])
        self.assertEqual(table_info[4][1], expected_columns[4])

    #  'news.db' file already exists
    def test_database_file_already_exists(self):
        # Arrange
        expected_file_exists = True
    
        # Act
        conn = setup_database()
    
        # Assert
        self.assertEqual(os.path.exists('news.db'), expected_file_exists)

    #  'news' table already exists in the database
    def test_table_already_exists_in_database(self):
        # Arrange
        expected_table_exists = True
    
        # Act
        conn = setup_database()
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='news'")
        table_exists = cursor.fetchone()
    
        # Assert
        self.assertEqual(table_exists, expected_table_exists)

    #  Invalid SQL statement passed to cursor.execute()
    def test_invalid_sql_statement(self):
        # Arrange
        invalid_sql_statement = "CREATE TABLE IF NOT EXISTS news (date_time TEXT, title TEXT, source TEXT, category TEXT, url TEXT"
    
        # Act & Assert
        with self.assertRaises(sqlite3.OperationalError):
            conn = setup_database()
            cursor = conn.cursor()
            cursor.execute(invalid_sql_statement)
