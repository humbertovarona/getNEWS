
# Generated by CodiumAI

import unittest

class TestGetNews(unittest.TestCase):

    #  fetches news from API and saves to database
    def test_fetches_news_and_saves_to_database(self):
        # Arrange
        api_key = 'your_api_key_here'
        conn = setup_database()
    
        # Act
        get_news(api_key)
    
        # Assert
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM news")
        result = cursor.fetchone()
        self.assertGreater(result[0], 0)
        conn.close()

    #  skips articles with title '[Removed]'
    def test_skips_articles_with_removed_title(self):
        # Arrange
        api_key = 'your_api_key_here'
        conn = setup_database()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO news (date_time, title, source, category, url) VALUES (?, ?, ?, ?, ?)", ('2021-01-01', '[Removed]', 'Source', 'Category', 'https://example.com'))
        conn.commit()
    
        # Act
        get_news(api_key)
    
        # Assert
        cursor.execute("SELECT COUNT(*) FROM news WHERE title = '[Removed]'")
        result = cursor.fetchone()
        self.assertEqual(result[0], 1)
        conn.close()

    #  skips articles already saved in database
    def test_skips_articles_already_saved_in_database(self):
        # Arrange
        api_key = 'your_api_key_here'
        conn = setup_database()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO news (date_time, title, source, category, url) VALUES (?, ?, ?, ?, ?)", ('2021-01-01', 'Article 1', 'Source', 'Category', 'https://example.com'))
        conn.commit()
    
        # Act
        get_news(api_key)
    
        # Assert
        cursor.execute("SELECT COUNT(*) FROM news WHERE title = 'Article 1'")
        result = cursor.fetchone()
        self.assertEqual(result[0], 1)
        conn.close()

    #  handles empty API response
    def test_handles_empty_api_response(self):
        # Arrange
        api_key = 'your_api_key_here'
        conn = setup_database()
        cursor = conn.cursor()
    
        # Act
        get_news(api_key)
    
        # Assert
        cursor.execute("SELECT COUNT(*) FROM news")
        result = cursor.fetchone()
        self.assertEqual(result[0], 0)
        conn.close()

    #  handles API response with missing fields
    def test_handles_api_response_with_missing_fields(self):
        # Arrange
        api_key = 'your_api_key_here'
        conn = setup_database()
        cursor = conn.cursor()
    
        # Act
        get_news(api_key)
    
        # Assert
        cursor.execute("SELECT COUNT(*) FROM news")
        result = cursor.fetchone()
        self.assertEqual(result[0], 0)
        conn.close()

    #  handles database connection errors
    def test_handles_database_connection_errors(self):
        # Arrange
        api_key = 'your_api_key_here'
        conn = setup_database()
        cursor = conn.cursor()
        conn.close()
    
        # Act and Assert
        with self.assertRaises(sqlite3.ProgrammingError):
            get_news(api_key)
